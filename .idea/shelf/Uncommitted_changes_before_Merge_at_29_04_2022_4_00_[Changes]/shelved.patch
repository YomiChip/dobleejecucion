Index: src/DibujoPolares.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport javax.swing.JFrame;\r\nimport java.awt.*;\r\nimport java.awt.event.ComponentEvent;\r\nimport java.awt.event.ComponentListener;\r\nimport java.lang.reflect.Method;\r\n\r\npublic class DibujoPolares {\r\n    private static Color devuelveRadianes(double radio, double angulo) {\r\n        //Método a modificar. radio y angulo están entre 0 y 1.\r\n        //El radio vale 1 en las esquinas\r\n        //El angulo empieza en la parte superior de la vertical y va en sentido antihorario\r\n\r\n\r\n        if (angulo <= 0.25 || angulo >= 0.75) {\r\n            if (radio < 0.1) {\r\n                return new Color(147, 147, 147);\r\n\r\n            }\r\n            if (radio > 0.1 && radio < 0.2) {\r\n                return new Color(136, 24, 246);\r\n\r\n            }\r\n            if (radio > 0.2 && radio < 0.3) {\r\n                return new Color(21, 22, 255);\r\n\r\n            }\r\n            if (radio > 0.3 && radio < 0.4) {\r\n                return new Color(118, 238, 255);\r\n\r\n            }\r\n            if (radio > 0.4 && radio < 0.5) {\r\n                return new Color(36, 255, 102);\r\n\r\n            }\r\n            if (radio > 0.5 && radio < 0.6) {\r\n                return new Color(253, 255, 57);\r\n\r\n            }\r\n            if (radio > 0.6 && radio < 0.7) {\r\n                return new Color(255, 135, 30);\r\n\r\n            }\r\n            if (radio > 0.7 && radio < 0.8) {\r\n                return new Color(255, 21, 34);\r\n\r\n            }\r\n\r\n        }\r\n        return new Color(147, 147, 147);\r\n    }\r\n\r\n\r\n    //NO MODIFICAR A PARTIR DE AQUÍ\r\n\r\n\r\n    public static int ANCHO = 400;\r\n    public static int ALTO = 400;\r\n    public static int diagonal = (int) Math.sqrt(ANCHO * ANCHO + ALTO * ALTO);\r\n\r\n\r\n    public static void repinta(Canvas cnvs) {\r\n        Graphics g = cnvs.getGraphics();\r\n        Dimension dimension = cnvs.getSize();\r\n        ANCHO = dimension.width;\r\n        ALTO = dimension.height;\r\n        for (int x = 0; x < ANCHO; x++) {\r\n            for (int y = 0; y < ALTO; y++) {\r\n                double r = radioRadianes(x, y);\r\n                double angulo = anguloRadianes(x, y);\r\n                Color color = devuelveRadianes(r, angulo);\r\n                g.setColor(color);\r\n                g.drawOval(x, y, 1, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        JFrame frmMain = new JFrame();\r\n        frmMain.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frmMain.setSize(ANCHO, ALTO + 50);\r\n\r\n        final Canvas cnvs = new Canvas();\r\n        cnvs.setSize(ANCHO, ALTO);\r\n\r\n        frmMain.addComponentListener(new ComponentListener() {\r\n            @Override\r\n            public void componentResized(ComponentEvent componentEvent) {\r\n                Component c = (Component) componentEvent.getSource();\r\n                repinta(cnvs);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void componentMoved(ComponentEvent componentEvent) {\r\n                Component c = (Component) componentEvent.getSource();\r\n\r\n                repinta(cnvs);\r\n            }\r\n\r\n            @Override\r\n            public void componentShown(ComponentEvent componentEvent) {\r\n\r\n                repinta(cnvs);\r\n            }\r\n\r\n            @Override\r\n            public void componentHidden(ComponentEvent componentEvent) {\r\n\r\n            }\r\n        });\r\n        frmMain.add(cnvs);\r\n        frmMain.setVisible(true);\r\n\r\n\r\n        repinta(cnvs);\r\n    }\r\n\r\n    private static double anguloRadianes(int x, int y) {\r\n        return mapeaPI(Math.atan2((double) (x - ANCHO / 2), (double) (y - ALTO / 2)));\r\n    }\r\n\r\n    private static double radioRadianes(int x, int y) {\r\n        return 2 * Math.sqrt((x - ANCHO / 2) * (x - ANCHO / 2) + (y - ALTO / 2) * (y - ALTO / 2)) / diagonal;\r\n    }\r\n\r\n\r\n    private static double mapeaPI(double theta) {\r\n        double positivo = theta + Math.PI;\r\n        return positivo / (Math.PI * 2);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DibujoPolares.java b/src/DibujoPolares.java
--- a/src/DibujoPolares.java	(revision 264bd549cd8479ab4b4668b60eece7f4e766057d)
+++ b/src/DibujoPolares.java	(date 1651197482782)
@@ -12,21 +12,21 @@
         //El angulo empieza en la parte superior de la vertical y va en sentido antihorario
 
 
-        if (angulo <= 0.25 || angulo >= 0.75) {
+        if (angulo <= 0.25 || angulo >= 0.00) {
             if (radio < 0.1) {
-                return new Color(147, 147, 147);
+                return new Color(255, 0, 0);
 
             }
             if (radio > 0.1 && radio < 0.2) {
-                return new Color(136, 24, 246);
+                return new Color(255, 0, 0);
 
             }
-            if (radio > 0.2 && radio < 0.3) {
-                return new Color(21, 22, 255);
+            if (radio > 0.2 ) {
+                return new Color(255, 255, 255);
 
             }
             if (radio > 0.3 && radio < 0.4) {
-                return new Color(118, 238, 255);
+                return new Color(255, 255, 255);
 
             }
             if (radio > 0.4 && radio < 0.5) {
@@ -47,7 +47,7 @@
             }
 
         }
-        return new Color(147, 147, 147);
+        return new Color(255, 255, 255);
     }
 
 
Index: src/DibujoCartesianas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\nimport javax.swing.JFrame;\r\nimport java.awt.*;\r\nimport java.awt.event.ComponentEvent;\r\nimport java.awt.event.ComponentListener;\r\nimport java.lang.reflect.Method;\r\n\r\npublic class DibujoCartesianas {\r\n\r\n    //Método a modificar. x e y están entre 0 y 1.\r\n    //El origen (0,0) está en la esquina inferior izquierda\r\n\r\n    public static Color crear3franjas(double x, double y) {\r\n        if (x < 0.33) {\r\n            return new Color(255, 4, 28);\r\n        }\r\n        if (x < 0.66 && x > 0.33) {\r\n            return new Color(0, 0, 0);\r\n        }\r\n\r\n        if (x < 1 && x > 0.66) {\r\n            return new Color(241, 255, 29);\r\n        }\r\n\r\n\r\n        return new Color(0, 0, 0);\r\n    }\r\n\r\n    public static Color crear3columnas(double x, double y) {\r\n        if (y < 0.33) {\r\n            return new Color(255, 4, 28);\r\n        }\r\n        if (y < 0.66 && y > 0.33) {\r\n            return new Color(0, 0, 0);\r\n        }\r\n\r\n        if (y < 1 && y > 0.66) {\r\n            return new Color(241, 255, 29);\r\n        }\r\n\r\n\r\n        return new Color(0, 0, 0);\r\n    }\r\n\r\n\r\n    private static Color devuelveColor(double x, double y) {\r\n        if (x < 0.23) {\r\n            return new Color(5, 11, 198);\r\n        }\r\n\r\n        if (y < 0.22 && y > 0.11) {\r\n            return new Color(198, 11, 30);\r\n        }\r\n        if (y < 0.44 && y > 0.33) {\r\n            return new Color(198, 11, 30);\r\n        }\r\n        if (y < 0.66 && y > 0.55) {\r\n            return new Color(198, 11, 30);\r\n        }\r\n        if (y < 0.88 && y > 0.77) {\r\n            return new Color(198, 11, 30);\r\n        }\r\n        return new Color(247, 244, 30);\r\n    }\r\n\r\n\r\n    //NO MODIFICAR A PARTIR DE AQUÍ\r\n\r\n    public static int ANCHO = 400;\r\n    public static int ALTO = 400;\r\n    public static int diagonal = (int) Math.sqrt(ANCHO * ANCHO + ALTO * ALTO);\r\n\r\n    public static void repinta(Canvas cnvs) {\r\n        Graphics g = cnvs.getGraphics();\r\n        Dimension dimension = cnvs.getSize();\r\n        ANCHO = dimension.width;\r\n        ALTO = dimension.height;\r\n        for (int x = 0; x < ANCHO; x++) {\r\n            for (int y = 0; y < ALTO; y++) {\r\n                Color color = devuelveColor(x / (double) ANCHO, y / (double) ALTO);\r\n                g.setColor(color);\r\n                g.drawOval(x, y, 1, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        JFrame frmMain = new JFrame();\r\n        frmMain.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frmMain.setSize(ANCHO, ALTO + 50);\r\n\r\n        final Canvas cnvs = new Canvas();\r\n        cnvs.setSize(ANCHO, ALTO);\r\n\r\n        frmMain.addComponentListener(new ComponentListener() {\r\n            @Override\r\n            public void componentResized(ComponentEvent componentEvent) {\r\n                Component c = (Component) componentEvent.getSource();\r\n                repinta(cnvs);\r\n            }\r\n\r\n            @Override\r\n            public void componentMoved(ComponentEvent componentEvent) {\r\n                Component c = (Component) componentEvent.getSource();\r\n                repinta(cnvs);\r\n            }\r\n\r\n            @Override\r\n            public void componentShown(ComponentEvent componentEvent) {\r\n                repinta(cnvs);\r\n            }\r\n\r\n            @Override\r\n            public void componentHidden(ComponentEvent componentEvent) {\r\n            }\r\n        });\r\n        frmMain.add(cnvs);\r\n        frmMain.setVisible(true);\r\n        repinta(cnvs);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DibujoCartesianas.java b/src/DibujoCartesianas.java
--- a/src/DibujoCartesianas.java	(revision 264bd549cd8479ab4b4668b60eece7f4e766057d)
+++ b/src/DibujoCartesianas.java	(date 1651197181372)
@@ -45,10 +45,12 @@
 
 
     private static Color devuelveColor(double x, double y) {
-        if (x < 0.23) {
+        if (x > 0.30 && y > 0.50 ) {
+            return new Color(198, 11, 30);
+        }
+        if (x > 0.30 && y < 0.50 ) {
             return new Color(5, 11, 198);
         }
-
         if (y < 0.22 && y > 0.11) {
             return new Color(198, 11, 30);
         }
